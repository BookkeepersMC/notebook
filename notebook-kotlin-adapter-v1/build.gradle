buildscript {
	repositories {
		gradlePluginPortal()
		mavenCentral()
	}
	dependencies {
		def kotlinVersion = project.file("generated_files/kotlin_version.txt").text
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
	}
}

apply plugin: "org.jetbrains.kotlin.jvm"

def LIBRARY_VERSIONS_FILE = "generated_files/library_versions.json"
def KOTLIN_VERSION_FILE = "generated_files/kotlin_version.txt"

def kotlinLib = "org.jetbrains.kotlin:kotlin-stdlib"
def libraries = [
	kotlinLib,
	"org.jetbrains.kotlin:kotlin-stdlib-jdk8",
	"org.jetbrains.kotlin:kotlin-stdlib-jdk7",
	"org.jetbrains.kotlin:kotlin-reflect",

	"org.jetbrains.kotlinx:kotlinx-coroutines-core",
	"org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm",
	"org.jetbrains.kotlinx:kotlinx-coroutines-jdk8",
	"org.jetbrains.kotlinx:kotlinx-serialization-core-jvm",
	"org.jetbrains.kotlinx:kotlinx-serialization-json-jvm",
	"org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm",
	"org.jetbrains.kotlinx:atomicfu-jvm",
	"org.jetbrains.kotlinx:kotlinx-datetime-jvm",
	"org.jetbrains.kotlinx:kotlinx-io-core-jvm",
	"org.jetbrains.kotlinx:kotlinx-io-bytestring-jvm"
]

def libVersions = new JsonSlurper().parse(file(LIBRARY_VERSIONS_FILE))
def hasMissingLibVersion = !libVersions.keySet().containsAll(libraries)
def kotlinVersion = file(KOTLIN_VERSION_FILE).text

configurations {
	includeAndExpose

	modApi {
		extendsFrom includeAndExpose
	}
	include {
		extendsFrom includeAndExpose
	}
}

dependencies {
	if (hasMissingLibVersion) {
		println("Contains missing lib version, run updateLibVersions task!")
	} else {
		libraries.forEach {
			includeAndExpose("${it}:${libVersions[it]}")
		}
	}
}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import org.gradle.util.VersionNumber

import java.nio.charset.StandardCharsets

tasks.register("updateLibVersions") {
	doFirst {
		def output = [:]
		def slurper = new XmlSlurper()
		for (def lib : libraries) {
			def split = lib.split(":", 2)
			def group = split[0].replace(".", "/")
			def artifact = split[1]
			def xml = new URL("https://repo1.maven.org/maven2/${group}/${artifact}/maven-metadata.xml").text
			def metadata = slurper.parseText(xml)
			def versions = metadata.versioning.versions.version*.text()

			def latest = versions[0]
			def latestParsed = VersionNumber.parse(latest)
			for (def version : versions) {
				def parsed = VersionNumber.parse(version)
				if (parsed.qualifier == null && parsed > latestParsed) {
					latestParsed = parsed
					latest = version
				}
			}

			output.put(lib, latest)

			if (lib == kotlinLib) {
				file(KOTLIN_VERSION_FILE).setText(latest, StandardCharsets.UTF_8.name())
			}
		}
		def json = new JsonBuilder(output)
		file(LIBRARY_VERSIONS_FILE).setText(json.toPrettyString(), StandardCharsets.UTF_8.name())
	}
}
